stages:
  - test
  - staging
  - release

image: docker:19

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
  - docker:19-dind

variables:
  DOCKER_TLS_CERTDIR: ""

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
# cache:

build:
  stage: test
  script: 
    - docker build --pull -t $CI_REGISTRY/ulrichdahl/fleet-manager-bot:$CI_COMMIT_SHORT_SHA .
    - docker run $CI_REGISTRY/ulrichdahl/fleet-manager-bot:$CI_COMMIT_SHORT_SHA npm run test
    - docker push $CI_REGISTRY/ulrichdahl/fleet-manager-bot:$CI_COMMIT_SHORT_SHA
  only:
    - master

deploy_staging:
  stage: staging
  script:
    - docker pull $CI_REGISTRY/ulrichdahl/fleet-manager-bot:$CI_COMMIT_SHORT_SHA 
    - docker stop fleet-manager-bot-staging && test 1
    - docker run --name fleet-manager-bot-staging -d -e "TOKEN=$DISCORD_TOKEN" -e "GUILD=$DISCORD_SERVER" -e "URI_PREFIX=$FLEET_MANAGER_API_URI" $CI_REGISTRY/ulrichdahl/fleet-manager-bot:latest
  environment:
    name: staging
    url: https://staging-fleet-manager.ulrichdahl.dk
  only:
    - master

deploy_production:
  stage: release
  script:
    - docker pull $CI_REGISTRY/ulrichdahl/fleet-manager-bot:$CI_COMMIT_SHORT_SHA 
    - docker tag $CI_REGISTRY/ulrichdahl/fleet-manager-bot:$CI_COMMIT_SHORT_SHA $CI_REGISTRY/ulrichdahl/fleet-manager-bot:latest
    - docker push $CI_REGISTRY/ulrichdahl/fleet-manager-bot:latest
    - docker stop fleet-manager-bot && test 1
    - docker run --name fleet-manager-bot -d -e "TOKEN=$DISCORD_TOKEN" -e "GUILD=$DISCORD_SERVER" -e "URI_PREFIX=$FLEET_MANAGER_API_URI" $CI_REGISTRY/ulrichdahl/fleet-manager-bot:latest
  environment:
    name: production
    url: https://fleet-manager.ulrichdahl.dk
  when: manual
  only:
    - master
